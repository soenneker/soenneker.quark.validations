@using Soenneker.Quark.Enums

@implements IValidationInput

<input type="@Type"
       @bind="Value"
       @bind:event="oninput"
       @bind:after="OnValueChanged"
       placeholder="@Placeholder"
       disabled="@Disabled"
       readonly="@ReadOnly"
       required="@Required"
       maxlength="@(MaxLength > 0 ? MaxLength : null)"
       class="@GetInputClass()" />

@code {

	[CascadingParameter]
	public Validation? ParentValidation { get; set; }

	[Parameter]
	public string? Value { get; set; }

	[Parameter]
	public EventCallback<string?> ValueChanged { get; set; }

	[Parameter]
	public string? Placeholder { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public bool ReadOnly { get; set; }

	[Parameter]
	public bool Required { get; set; }

	[Parameter]
	public int MaxLength { get; set; }

	[Parameter]
	public string Type { get; set; } = "text";

	[Parameter]
	public CssValue<ColorBuilder> Color { get; set; } = Quark.Color.Primary;

	[Parameter]
	public CssValue<SizeBuilder>? Size { get; set; } = Size.Default;

	public object? ValidationValue => Value;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && ParentValidation is not null)
		{
			await ParentValidation.InitializeInput(this);
		}
		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task OnValueChanged()
	{
		await ValueChanged.InvokeAsync(Value);
		
		if (ParentValidation is not null)
		{
			await ParentValidation.NotifyInputChanged(Value);
		}
	}

	private string GetInputClass()
	{
		var classes = "form-control";

		// Add color class
		if (Color.IsCssClass)
		{
			classes += $" form-control-{Color}";
		}

		// Add size class
		if (Size != Size.Default)
		{
			classes += $" form-control-{Size.Value}";
		}

		// Add validation classes
		if (ParentValidation?.Status == ValidationStatus.Error)
		{
			classes += " is-invalid";
		}
		else if (ParentValidation?.Status == ValidationStatus.Success)
		{
			classes += " is-valid";
		}

		return classes;
	}

}
