@inherits Soenneker.Quark.TextEdit
@implements IValidationInput

@code {
    [CascadingParameter] public Validation? ParentValidation { get; set; }
    
    public object? ValidationValue => Value;
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        // Apply validation styling
        if (ParentValidation?.Status == ValidationStatus.Error)
        {
            Class = AppendToClass(Class, "is-invalid");
        }
        else if (ParentValidation?.Status == ValidationStatus.Success)
        {
            Class = AppendToClass(Class, "is-valid");
        }
        
        // Set up two-way binding if not already set
        if (!ValueChanged.HasDelegate)
        {
            ValueChanged = EventCallback.Factory.Create<string>(this, async (value) =>
            {
                Value = value;
                await InvokeAsync(StateHasChanged);
                
                if (ParentValidation is not null)
                {
                    await ParentValidation.NotifyInputChanged(value);
                }
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ParentValidation is not null)
        {
            await ParentValidation.InitializeInput(this);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private new string AppendToClass(string? existing, string? newClass)
    {
        if (string.IsNullOrEmpty(existing))
            return newClass ?? string.Empty;
        if (string.IsNullOrEmpty(newClass))
            return existing;
        return $"{existing} {newClass}";
    }
}
